package com.example.moneyflow_jetpackcompose.viewmodel

import android.content.Context
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.util.Base64
import android.util.Log
import android.widget.Toast
import androidx.compose.runtime.State
import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.example.moneyflow_jetpackcompose.api.ApiClient
import com.example.moneyflow_jetpackcompose.api.AuthRequest
import com.example.moneyflow_jetpackcompose.api.ImageRequest
import com.example.moneyflow_jetpackcompose.api.UpdateEmailRequest
import com.example.moneyflow_jetpackcompose.api.UpdatePasswordRequest
import com.example.moneyflow_jetpackcompose.datastore.DataStoreManager
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext


class AuthViewModel: ViewModel() {
    private val api = ApiClient.authApi

    private val _email = mutableStateOf("")
    val email: State<String> = _email
    private val _imgProfile = mutableStateOf("")
    val imgProfile: State<String> = _imgProfile

    private val _base64String = mutableStateOf<String?>(null)
    val base64String : State<String?> = _base64String

    fun updateBase64String(value: String) {
        _base64String.value = value
    }
    fun getUser(context: Context, userId: String) {
        viewModelScope.launch {
            try {
                val response = api.getUser(userId)
                if (response.isSuccessful) {
                    response.body()?.let {
                        if (it.email.isNullOrEmpty()) {
                            Toast.makeText(context, "Get data failed", Toast.LENGTH_LONG).show()
                        } else {
                            _email.value = it.email
                            if (!it.imgProfile.isNullOrEmpty()) {
                                _imgProfile.value = it.imgProfile
                            } else {
                                _imgProfile.value = ""

                            }
                        }
                    }
                }
            } catch (e: Exception) {
                Log.e("API", "Error: ${e.localizedMessage}")
            }
        }
    }

    fun login(context: Context, email: String, password: String, navController: NavController) {
        viewModelScope.launch {

            try {
                val response = api.login(AuthRequest(email, password))
                if (response.isSuccessful) {
                    response.body()?.let {
                        if (it.token.isNullOrEmpty()) {
                            Toast.makeText(context, "❌ Login Failed ${it.message}", Toast.LENGTH_LONG).show()
                            Log.e("API", "${it.message}")
                        } else {
                            DataStoreManager.saveToken(context, it.token)
                            Toast.makeText(context, "${it.message}", Toast.LENGTH_LONG).show()
                            Log.d("API", "${it.message}")
                            navController.navigate("home")
                        }

                    }
                }
            } catch (e: Exception) {
                Toast.makeText(context, "Login Failed ${e.localizedMessage}", Toast.LENGTH_LONG).show()
                Log.e("Login Error", "${e.localizedMessage}");
            }
        }
    }

    fun register(context: Context, email: String, password: String, navController: NavController) {
        viewModelScope.launch {
            try {
                 val response = api.register(AuthRequest(email, password))
                Log.d("Auth Request", "$email || $password")
                if (response.isSuccessful) {
                    response.body()?.let {
                        if (it.token.isNullOrEmpty()) {
                            Toast.makeText(context, "❌ ${it.message}", Toast.LENGTH_LONG).show()
                            Log.e("API", "${it.message}")
                        } else {
                            DataStoreManager.saveToken(context, it.token)
                            Toast.makeText(context, "${it.message}", Toast.LENGTH_LONG).show()
                            Log.d("API", "${it.message}")
                            navController.navigate("home")
                        }
                    }
                }
            } catch (e: Exception) {
                Toast.makeText(context, "Registered Failed ${e.localizedMessage}", Toast.LENGTH_LONG).show()
                Log.e("Registered Error", "${e.localizedMessage}");
            }
        }
    }

    fun logout(context: Context, navController: NavController) {
        viewModelScope.launch {
            try {
                withContext(Dispatchers.IO) {
                    DataStoreManager.clearToken(context)
                }
                navController.navigate("login") {
                    popUpTo(navController.graph.startDestinationId) { inclusive = true}
                }
            } catch (e: Exception) {
                Toast.makeText(context, "Logout Failed ${e.localizedMessage}", Toast.LENGTH_LONG).show()
                Log.e("Logout Error", "${e.localizedMessage}");
            }
        }
    }

    fun updateImageProfile(context: Context, userId: String, value: String) {
        viewModelScope.launch {
            try {
                val response = api.updateImage(userId, ImageRequest(value))
                if (response.isSuccessful) {
                    response.body()?.data?.let {
                        if (!it.imgProfile.isNullOrEmpty()) {
                            _imgProfile.value = it.imgProfile
                            Toast.makeText(context, "Update image profile successful", Toast.LENGTH_LONG).show()
                            _base64String.value = null 
                            Log.d("API", "Update image profile successful")
                        }
                    }
                } else {
                    Log.e("API", "Response Failed : ${response.code()}")
                }
            } catch (e: Exception) {
                Log.e("API", "Error: ${e.localizedMessage}")
            }
        }
    }

    fun updateEmail(context: Context, userId: String, newEmail: String) {
        viewModelScope.launch {
            try {
                Log.d("API", "Update Email Change Data: $userId, $newEmail")
                val response = api.updateEmail(userId, UpdateEmailRequest(newEmail))
                if (response.isSuccessful) {
                    response.body()?.data?.let {
                        Log.d("API", "Response Data: $it")
                        if (!it.email.isNullOrEmpty()) {
                            _email.value = it.email
                            Toast.makeText(context, "Update email successful.", Toast.LENGTH_LONG).show()
                            Log.d("API", "Update email successful.")
                        }
                    }
                } else {
                    Log.e("API", "Response Failed : ${response.code()}")
                }
            } catch (e: Exception) {
                Log.e("API", "Error: ${e.localizedMessage}")
            }
        }
    }

    fun updatePassword(context: Context, userId: String, oldPassword: String, newPassword: String) {
        viewModelScope.launch {
            try {
                val response = api.updatePassword(userId, UpdatePasswordRequest(oldPassword, newPassword))
                if (response.isSuccessful) {
                    response.body()?.data?.let {
                        if (it != null) {
                            Toast.makeText(context, "Update password successful.", Toast.LENGTH_LONG).show()
                            Log.d("API", "Update password successful.")
                        }
                    }
                } else {
                    Log.e("API", "Response Failed: ${response.code()}")
                }
            } catch (e: Exception) {
                Log.e("API", "Error: ${e.localizedMessage}")
            }
        }
    }

    fun forgotPassword(context: Context, email: String) {
        viewModelScope.launch {
            try {
                Log.d("API", "Forgot Password")
                val response = api.forgotPassword(UpdateEmailRequest(email))
                Log.d("API", "Forgot Password 2")
                if (response.isSuccessful) {
                    Log.d("API", "Forgot Password 3 Response Item : ${response.body()?.message?: ""}")
                    response.body()?.data?.let {
                        Log.d("API", "Forgot Password 4 $it")
                        if (it != null) {
                            Toast.makeText(context, "Send reset password link to $email successful.", Toast.LENGTH_LONG).show()
                            Log.d("API", "Send link to $email successful.")
                        } else {
                            Log.d("API", "IT : $it")
                        }
                    }
                } else {
                    Log.e("API", "Response Failed: ${response.code()}")
                }
            } catch (e: Exception) {
                Log.e("API", "Error : ${e.localizedMessage}")
            }
        }
    }
}